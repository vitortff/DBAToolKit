--Variáveis do relatório
DECLARE @appnome NVARCHAR(4000)
DECLARE @distribuicao NVARCHAR(4000)
DECLARE @dbnomebase NVARCHAR(4000)
DECLARE @dbnomeservidor VARCHAR(4000)
DECLARE @servername VARCHAR(4000)


--Variáveis SQL Dinâmico
DECLARE @SQLString NVARCHAR(4000)
DECLARE @SQLString2 NVARCHAR(4000)
DECLARE @SQLString3 NVARCHAR(4000)
DECLARE @SQLString4 NVARCHAR(4000)
DECLARE @SQLString5 NVARCHAR(4000)


-- Cursor para percorrer os registros
DECLARE cursor1 CURSOR FOR


--Varendo a tabela de contas 
SELECT appnome, distribuicao, dbnomebase, dbnomeservidor,substring(dbnomeservidor,1, CHARINDEX('.',dbnomeservidor)-1) as servername FROM NVJ_Escritorio_FirmBR WHERE isativo=1 
UNION ALL
SELECT appnome, distribuicao, dbnomebase, dbnomeservidor,substring(dbnomeservidor,1, CHARINDEX('.',dbnomeservidor)-1) as servername FROM NVJ_Escritorio_CorpBR WHERE isativo=1
UNION ALL
SELECT appnome, distribuicao, dbnomebase, dbnomeservidor,substring(dbnomeservidor,1, CHARINDEX('.',dbnomeservidor)-1) as servername FROM NVJ_Escritorio_FirmAR WHERE isativo=1



--Abrindo Cursor
OPEN cursor1
 
-- Lendo a próxima linha
FETCH NEXT FROM cursor1 INTO @appnome, @distribuicao, @dbnomebase, @dbnomeservidor, @servername 
 
-- Percorrendo linhas do cursor (enquanto houverem)
--FETCHSTATUS
--Essa função retorna o status do último cursor 
--que a instrução FETCH emitiu em relação a qualquer cursor atualmente aberto pela conexão.


WHILE @@FETCH_STATUS = 0 --Enquato a instrução FETCH for bem-sucedida.

BEGIN
 
-- Parte editável para futuras consultas
-- Executando as rotinas desejadas manipulando o registro
--1
SET @SQLString= 'CREATE EXTERNAL DATA SOURCE [' + @servername + '] WITH (TYPE=RDBMS, LOCATION = ''' + @dbnomeservidor + ''' ,DATABASE_NAME = ''' + @dbnomebase + ''' ,CREDENTIAL= [' + @servername +'])'
EXECUTE sp_executesql @SQLString


SET @SQLString2 = 'CREATE EXTERNAL TABLE sys_indexes (object_id int, is_primary_key bit, is_unique bit, is_unique_constraint bit, name sysname, index_id int) WITH (DATA_SOURCE =[' + @servername + '], SCHEMA_NAME = ''sys'', OBJECT_NAME = ''indexes'')'
EXECUTE sp_executesql @SQLString2


SET @SQLString3 = 'CREATE EXTERNAL TABLE sys_index_columns(object_id int , index_id int,column_id int) WITH (DATA_SOURCE =[' + @servername + '], SCHEMA_NAME = ''sys'', OBJECT_NAME = ''index_columns'')'
EXECUTE sp_executesql @SQLString3

SET @SQLString4 = 'CREATE EXTERNAL TABLE sys_columns(object_id int, column_id int, name sysname) WITH (DATA_SOURCE =[' + @servername + '], SCHEMA_NAME = ''sys'', OBJECT_NAME = ''columns'')'
EXECUTE sp_executesql @SQLString4


SET @SQLString5 = 'CREATE EXTERNAL TABLE sys_tables(object_id int, is_ms_shipped bit, name sysname) WITH (DATA_SOURCE =[' + @servername + '], SCHEMA_NAME = ''sys'', OBJECT_NAME = ''tables'')'
EXECUTE sp_executesql @SQLString5

--2
INSERT INTO LO_Check_Sync_Andamentos_Indexes
--SELECT @dbnomebase, count(*) Isnabled FROM Xml_CompressionReport where xml_compression = 1
SELECT @appnome, @distribuicao, @dbnomebase, @dbnomeservidor,'Atualizado?' = COUNT(*) FROM sys_indexes ind INNER JOIN sys_index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id INNER JOIN sys_columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id INNER JOIN sys_tables t ON ind.object_id = t.object_id WHERE ind.is_primary_key = 0 AND ind.is_unique = 0 AND ind.is_unique_constraint = 0 AND t.is_ms_shipped = 0 AND t.name = 'GEN_Andamento_Vinculo' AND ind.name = 'IX_GEN_ANDM_VINC_001' AND col.name = 'IsAtivo'

--3
DROP EXTERNAL TABLE sys_indexes
DROP EXTERNAL TABLE sys_index_columns
DROP EXTERNAL TABLE sys_columns
DROP EXTERNAL TABLE sys_tables



SET @SQLString4 = 'DROP EXTERNAL DATA SOURCE [' + @servername + ']'
EXECUTE sp_executesql @SQLString4

-- Lendo a próxima linha
FETCH NEXT FROM cursor1 INTO @appnome, @distribuicao, @dbnomebase, @dbnomeservidor, @servername

END

-- Fechando Cursor para leitura
CLOSE cursor1
 
-- Finalizado o cursor
DEALLOCATE cursor1



--DROP EXTERNAL TABLE SYS_INDEXES
--DROP EXTERNAL TABLE SYS_OBJECTS
--DROP EXTERNAL DATA SOURCE [legalone-prod-eastus2]
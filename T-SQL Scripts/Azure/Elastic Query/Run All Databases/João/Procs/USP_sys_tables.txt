CREATE PROCEDURE USP_sys_tables_l1
AS
--Talvez seja necessário alterar o nome do Data Source.
--O trecho de código a ser alterado é a parte 2

--Variáveis do relatório
DECLARE @appnome NVARCHAR(4000)
DECLARE @distribuicao NVARCHAR(4000)
DECLARE @dbnomebase NVARCHAR(4000)
DECLARE @dbnomeservidor VARCHAR(4000)
DECLARE @servername VARCHAR(4000)

DECLARE @DataSourceNumber varchar(10) = '14'

--Variáveis SQL Dinâmico
DECLARE @SQLString NVARCHAR(4000)

DECLARE @SQLString2_1 NVARCHAR(4000)
DECLARE @SQLString2_2  NVARCHAR(4000)


DECLARE @SQLString4  NVARCHAR(4000)


-- Cursor para percorrer os registros
DECLARE cursor1 CURSOR FOR


--Varendo a tabela de contas 
SELECT appnome, distribuicao, dbnomebase, dbnomeservidor,substring(dbnomeservidor,1, CHARINDEX('.',dbnomeservidor)-1) as servername FROM NVJ_Escritorio_FirmBR WHERE isativo=1
UNION ALL
SELECT appnome, distribuicao, dbnomebase, dbnomeservidor,substring(dbnomeservidor,1, CHARINDEX('.',dbnomeservidor)-1) as servername FROM NVJ_Escritorio_CorpBR WHERE isativo=1
UNION ALL
SELECT appnome, distribuicao, dbnomebase, dbnomeservidor,substring(dbnomeservidor,1, CHARINDEX('.',dbnomeservidor)-1) as servername FROM NVJ_Escritorio_FirmAR WHERE isativo=1



--Abrindo Cursor
OPEN cursor1
 
-- Lendo a próxima linha
FETCH NEXT FROM cursor1 INTO @appnome, @distribuicao, @dbnomebase, @dbnomeservidor, @servername 
 
-- Percorrendo linhas do cursor (enquanto houverem)
--FETCHSTATUS
--Essa função retorna o status do último cursor 
--que a instrução FETCH emitiu em relação a qualquer cursor atualmente aberto pela conexão.


WHILE @@FETCH_STATUS = 0 --Enquato a instrução FETCH for bem-sucedida.

BEGIN
 
-- Executando as rotinas desejadas manipulando o registro
--1
SET @SQLString= 'CREATE EXTERNAL DATA SOURCE [' + @servername + '_' + @DataSourceNumber + '] WITH (TYPE=RDBMS, LOCATION = ''' + @dbnomeservidor + ''' ,DATABASE_NAME = ''' + @dbnomebase + ''' ,CREDENTIAL= [' + @servername +'])'
EXECUTE sp_executesql @SQLString


-----------------------INICIO DA PARTE A SER EDITADA------------------------------------------
--2
SET @SQLString2_1 = '
CREATE EXTERNAL TABLE [dbo].[sys_allocation_units](
	[allocation_unit_id] [bigint],
	[type] [tinyint],
	[type_desc] [nvarchar](60),
	[container_id] [bigint],
	[data_space_id] [int],
	[total_pages] [bigint],
	[used_pages] [bigint],
	[data_pages] [bigint] 
) 
WITH (DATA_SOURCE =[' + @servername + '_' + @DataSourceNumber + '], SCHEMA_NAME = ''sys'', OBJECT_NAME = ''allocation_units'')

CREATE EXTERNAL TABLE [dbo].[sys_partitions](
	[partition_id] [bigint],
	[object_id] [int],
	[index_id] [int],
	[partition_number] [int],
	[hobt_id] [bigint],
	[rows] [bigint],
	[filestream_filegroup_id] [smallint],
	[data_compression] [tinyint],
	[data_compression_desc] [nvarchar](60) 
) 
WITH (DATA_SOURCE =[' + @servername + '_' + @DataSourceNumber + '], SCHEMA_NAME = ''sys'', OBJECT_NAME = ''partitions'')

CREATE EXTERNAL TABLE [dbo].[sys_tables](
	[name] [sysname],
	[object_id] [int],
	[principal_id] [int],
	[schema_id] [int],
	[parent_object_id] [int],
	[type] [char](2),
	[type_desc] [nvarchar](60),
	[create_date] [datetime],
	[modify_date] [datetime],
	[is_ms_shipped] [bit],
	[is_published] [bit],
	[is_schema_published] [bit],
	[lob_data_space_id] [int],
	[filestream_data_space_id] [int],
	[max_column_id_used] [int],
	[lock_on_bulk_load] [bit],
	[uses_ansi_s] [bit],
	[is_replicated] [bit],
	[has_replication_filter] [bit],
	[is_merge_published] [bit],
	[is_sync_tran_subscribed] [bit],
	[has_unchecked_assembly_data] [bit],
	[text_in_row_limit] [int],
	[large_value_types_out_of_row] [bit],
	[is_tracked_by_cdc] [bit],
	[lock_escalation] [tinyint],
	[lock_escalation_desc] [nvarchar](60),
	[is_fileEXTERNAL TABLE] [bit],
	[is_memory_optimized] [bit],
	[durability] [tinyint],
	[durability_desc] [nvarchar](60)) 
	WITH (DATA_SOURCE =[' + @servername + '_' + @DataSourceNumber + '], SCHEMA_NAME = ''sys'', OBJECT_NAME = ''tables'')
'

EXECUTE sp_executesql @SQLString2_1


--Criando a nova 

SET @SQLString2_2= 'INSERT INTO sys_tables_l1 SELECT ''' + @appnome + ''',''' + @dbnomebase + ''', 
[Tables].name AS [TableName], 
SUM([Partitions].[rows]) AS [RowCounts], 
SUM([AUnits].used_pages) *8 AS [UsedSpaceKB], 
(SUM([AUnits].total_pages) - SUM([AUnits].used_pages)) *8 AS [UnusedSpaceKB], 
SUM([AUnits].total_pages) *8  AS [TotalSpaceKB],
GETDATE () AS Datetime 
FROM sys_tables AS[Tables] 
JOIN sys_partitions AS[Partitions] ON[Tables].[object_id] = [Partitions].[object_id] AND[Partitions].index_id IN(0, 1) 
JOIN sys_allocation_units[AUnits] ON[Partitions].partition_id = [AUnits].container_id 
GROUP BY[Tables].name 
ORDER BY[Tables].name
'

EXECUTE sp_executesql @SQLString2_2

DROP EXTERNAL TABLE sys_allocation_units
DROP EXTERNAL TABLE sys_partitions
DROP EXTERNAL TABLE sys_tables


----------------------------FIM DA PARTE A SER EDITADA------------------------------------


SET @SQLString4 = 'DROP EXTERNAL DATA SOURCE [' + @servername + '_' + @DataSourceNumber + ']'
EXECUTE sp_executesql @SQLString4

-- Lendo a próxima linha
FETCH NEXT FROM cursor1 INTO @appnome, @distribuicao, @dbnomebase, @dbnomeservidor, @servername

END

-- Fechando Cursor para leitura
CLOSE cursor1
 
-- Finalizado o cursor
DEALLOCATE cursor1

--SELECT
--(SELECT count(database_name) as Habilitado FROM Xml_CompressionReportGeral WHERE Isenabled = 1) as Habilitado, 
--(SELECT count(database_name) as Habilitado FROM Xml_CompressionReportGeral WHERE Isenabled = 0) as Desabilitado
-- delete from Xml_CompressionReportGeral



--drop external data source [legalone-prod-eastus2_]
--DROP EXTERNAL TABLE PRO_Processo

